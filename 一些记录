微信收藏里有此开源项目的一些讲解


使用步骤如下：

一、由于该项目后台是基于 bmob，所以首先到 bmob官网(http://www.bmob.cn) 注册开发者账号，创建应用，把 Constant类 其中的 KEY 替换为你自己创建的 application_id。



二、由于天气和定位功能是高德API提供的，所以要在 高德地图开发者官网(http://lbs.amap.com) 注册账号，并创建应用。把下面的value替换成自己创建的应用appkey



三、由于内部 user 的头像和背景默认是使用服务器上提供的图片，所以这里必须把根目录的图片内容上传到服务器上新建的 sys_data表 中。

相应的处理如下：

把项目的根目录 avatar 文件里的图片上传到文件类型的 avatar字段

把项目的根目录 wallpaper 文件里的图片上传到文件类型的 wallpaper字段。

把项目的根目录 twallpaper 文件里的图片上传到文件类型的 twallpaper字段。


聊天原理的实现
*仅仅是流程思路，具体实现请移步源码

单聊原理的实现

1、首先搜索好友,根据搜索条件搜索到好友 user,然后根据 user 中的 belongId 在服务器上查找用户的设备ID

2、构建邀请消息

3、将邀请消息转化为 jsonObject 数据，进行基于设备ID推送。

基于推送的结果进行相应的处理：

不管推送成功或失败，都要保存请求消息到服务器上面。

如果推送成功，对方在接受到消息后会在服务器上面更新该消息为已读状态。

如果推送失败，对方在开启定时检测服务时检测到该消息，并在服务器上更新为已读状态。

所以不管推送成功与否，对方都能接收到消息，唯一的区别就是：推送成功的情况，消息及时性比较高，推送失败后要隔一段时间后才能收到，这里我们可以缩短定时检测的时间周期，但流量耗费有大。

这里我采取优化的策略是：

根据监听网络连接状态的变化来做相应的调整：

如果连接的是wifi：适当缩短定时检测的时间周期

如果连接的是移动网络,适当延长定时检测的时间周期

4、对方接收到邀请消息后，做如下处理：

判断本地数据库中是否已有该消息，已有，不处理，否则在服务器上更新为已读状态，并保存到本地数据库中。通知监听界面邀请消息的到来，刷新界面

5、对方点击同意按钮，做如下处理:

在服务器上好友表中关联该用户

保存好友信息在本地数据库和内存中

更新邀请消息的状态，用于设置同意按钮不可点击

发送同意消息，流程跟上面一样

6、自己接收到同意消息后，做如下处理：

判断本地数据库中是否已有该消息，已有，不处理，否则在服务器上关联该用户为好友，在本地数据中存储到好友表中。在服务器上更新为已读状态，并保存到本地数据库中

7、上述处理完后发送回执消息，流程和上面的发送邀请消息一样基于设备id进行推送。

8、对方接收到回执消息后，做如下处理：

在服务器上更新回执消息为已读。

在服务器和本地数据库中更新关联的聊天消息为已读。

这样经过发送邀请消息、接受邀请消息、发送同意消息、接受同意消息、发送同意回执消息、接受同意回执消息6大步骤就正式建立了好友关系。

9、建立正常的好友关系后，就可以发送聊天消息拉拉：

发送和接受基本单聊消息流程如下：

9.1、判断网络状态。

9.2、判断是否为黑名单

9.3、判断是否是处于重发状态发送的

9.4、根据用户id,查找设备id

9.5、构建单聊消息实体，转化成jsonObject,最后基于设备id进行推送

9.6、对方接收到消息后，判断本地数据库中是否已有该消息，已有，不处理，否则发送回执消息，在服务器上更新该聊天消息的读取状态为已读，防止被定时服务再次拉取到。保存聊天消息到数据库中，保存最近会话消息到数据库中和通知监听界面消息的到来。

群聊原理的实现

发送和接受建群消息和流程如下：

1、根据群描述、群名、创建者id,群成员列表id,构建群结构消息实体，保存到服务器上

2、从服务器上获取该消息实体，并把该消息的 id 设置为 群id,即 groupId，并且存到本地的数据库中，

4、为每个成员在服务器上保存群结构消息。方便个人修改群名和群昵称的需要。

5、群主发送群欢迎消息给每个成员（通过直接上传构建好的群消息到指定的群消息表中，群成员会实时检测到该表的内容变化。）

6、对方接收到群结构消息后做如下操作：

6.1、在服务器上更新该消息的读取状态为已读

6.2、保存在本地数据库和内存中

6.3、通知监听界面消息的到来

6.4、在服务器上实时监听该群结构的变化。

经过上述的发送和接受监听群结构消息时，就已经正式加入群拉，就可以发送群聊消息。

7、发送和接受基本的群聊消息步骤如下：

7.1、根据内容构造群消息

7.2、保存群消息到我们实时监听的群消息表中，这里每当我们在上面保存一个群消息的时候，每个成员都能实时获取到该群消息

7.3、对方后台服务实时监听到该消息后，根据群结构消息，构建最近群会话消息，然后把最近会话和群消息保存到数据库中，最后通知监听界面刷新数据。

朋友圈实现功能如下

1、根据内容构造说说消息

2、保存到服务器上，再从服务器上获取该说说（这样才有说说id）

3、保存到本地数据库中。

4、通过说说id通知后台服务实时监听该说说的内容变化和删除操作。

5、好友通过后台的定时拉取服务每隔一段时间拉取好友的说说消息,，或者在朋友圈界面下拉刷新，获取到好友的最近说说数据后，这里可以通过该说说的不可见人列表是否包含自己本用户，以决定是否保留该说说消息,最后在后台的实时监听服务中通过拉取得到的说说id,监听该说说的内容变化和删除操作。

6、每个好友点赞或评论等操作，都对服务器上的说说消息同步更新，以至于每个监听到该说说的好友都能实时收到该说说消息的内容变化情况。

说明下：由于评论点赞完全仿微信，所以不能显示非好友的点赞和评论！

数据库设计与实现
数据库我采用的是原始的Sqlite数据库，以用户id作为数据库的库名，采取双重锁定的单例模式，对数据库访问采用可读可写访问模式。

外部存储

数据库中包含的表有以下：

最近会话消息表（包含群聊和单聊会话）、单聊信息表、好友信息表、好友请求消息表（用户展示邀请列表）、群消息表、群结构消息表、说说消息表、微信精选信息表、趣图消息表、笑话消息表、美女图片表

内部存储

1、主要保存在自定义的 UserCacheManager、MsgCacheManager 和 LocationManager 上面。包括全部好友信息缓存、黑名单缓存、群成员缓存、群结构缓存、本用户的信息、经纬度和地址列表。

2、基本信息存储到 SharePreferences，包括以下内容：

服务器时间和本地时间的差值、每个群消息的消息提醒设置信息、是否已经登录的信息、上次用户信息更新的时间、上次更新说说的时间、上册群结构消息更新时间、上次定位的地址列表和经纬度、单聊消息的提醒设置信息、振动和声音设置信息。

